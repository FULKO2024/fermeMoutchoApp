workflows:
  android-workflow:
    name: Android Build
    environment:
      vars:
        PACKAGE_NAME: "com.fermemoutcho.app"
      android_signing:
        - keystore_reference
      groups:
        - google_play
    scripts:
      - name: Set up environment
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Setting up environment..."
          
      - name: Install dependencies
        script: |
          #!/usr/bin/env sh
          set -e
          npm ci
          
      - name: Add Android platform
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap add android
          
      - name: Sync project
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap sync android
          
      - name: Build Android App Bundle
        script: |
          #!/usr/bin/env sh
          set -e
          cd android
          ./gradlew bundleRelease
          
    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/*.apk
      - android/app/build/outputs/**/mapping.txt
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_CREDENTIALS
        track: internal

  ios-workflow:
    name: iOS Build
    environment:
      vars:
        XCODE_PROJECT: "ios/App/App.xcodeproj"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "com.fermemoutcho.app"
      xcode: latest
      cocoapods: default
      groups:
        - ios_signing
    scripts:
      - name: Set up environment
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Setting up iOS environment..."
          echo "Xcode version: $(xcodebuild -version)"
          echo "Current directory: $(pwd)"
          echo "Development Team: $DEVELOPMENT_TEAM"
          
      - name: Install dependencies
        script: |
          #!/usr/bin/env sh
          set -e
          npm ci
          
      - name: Add iOS platform
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap add ios
          
      - name: Sync project
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap sync ios
          
      - name: Install CocoaPods
        script: |
          #!/usr/bin/env sh
          set -e
          cd ios/App
          pod install --repo-update
          
      - name: Configure iOS signing for automatic mode
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Configuring iOS signing for automatic mode..."
          
          # V√©rifier que le Team ID est d√©fini
          if [ -z "$DEVELOPMENT_TEAM" ]; then
            echo "‚ùå Error: DEVELOPMENT_TEAM variable is not set!"
            echo "Please configure the ios_signing variable group in CodeMagic"
            exit 1
          fi
          
          echo "Using Development Team: $DEVELOPMENT_TEAM"
          
          # Cr√©er le fichier exportOptions.plist pour signing automatique
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          echo "exportOptions.plist created with team ID: $DEVELOPMENT_TEAM"
          cat exportOptions.plist
          
      - name: List iOS project structure
        script: |
          #!/usr/bin/env sh
          set -e
          echo "iOS project structure:"
          ls -la ios/App/
          echo "Xcode project files:"
          ls -la ios/App/*.xcodeproj/
          
      - name: Build iOS Archive with automatic signing
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Starting iOS archive build with automatic signing..."
          
          # V√©rifier que le projet existe
          if [ ! -d "ios/App/App.xcworkspace" ]; then
            echo "Error: App.xcworkspace not found!"
            ls -la ios/App/
            exit 1
          fi
          
          # Build avec signing automatique complet
          xcodebuild -workspace ios/App/App.xcworkspace \
                     -scheme App \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath /tmp/App.xcarchive \
                     archive \
                     -verbose \
                     -allowProvisioningUpdates \
                     -allowProvisioningDeviceRegistration \
                     CODE_SIGN_STYLE=Automatic \
                     CODE_SIGN_IDENTITY="" \
                     DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
                     PROVISIONING_PROFILE=""
          
          echo "iOS Archive created successfully with automatic signing!"
          
      - name: Export iOS IPA with automatic signing
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Exporting iOS IPA with automatic signing..."
          
          # Exporter avec signing automatique
          xcodebuild -exportArchive \
                     -archivePath /tmp/App.xcarchive \
                     -exportPath /tmp/App \
                     -exportOptionsPlist exportOptions.plist \
                     -verbose \
                     -allowProvisioningUpdates
          
          if [ -f "/tmp/App/App.ipa" ]; then
            echo "‚úÖ IPA exported successfully with automatic signing!"
            echo "IPA location: /tmp/App/App.ipa"
            echo "üéâ Your IPA is ready for installation!"
          else
            echo "‚ùå IPA export failed, but archive is available"
            echo "üì¶ Archive location: /tmp/App.xcarchive"
            echo "üí° You can manually export IPA from Xcode using this archive"
          fi
          
    artifacts:
      - /tmp/App/App.ipa
      - /tmp/App.xcarchive
      - /tmp/xcodebuild_logs/*.log 