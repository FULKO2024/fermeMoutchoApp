workflows:
  android-workflow:
    name: Android Build
    environment:
      vars:
        PACKAGE_NAME: "com.fermemoutcho.app"
      android_signing:
        - keystore_reference
      groups:
        - google_play
    scripts:
      - name: Set up environment
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Setting up environment..."
          
      - name: Install dependencies
        script: |
          #!/usr/bin/env sh
          set -e
          npm ci
          
      - name: Add Android platform
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap add android
          
      - name: Sync project
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap sync android
          
      - name: Build Android App Bundle
        script: |
          #!/usr/bin/env sh
          set -e
          cd android
          ./gradlew bundleRelease
          
    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/*.apk
      - android/app/build/outputs/**/mapping.txt
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_CREDENTIALS
        track: internal

  ios-workflow:
    name: iOS Build
    environment:
      vars:
        XCODE_PROJECT: "ios/App/App.xcodeproj"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "com.fermemoutcho.app"
        DEVELOPMENT_TEAM: "YOUR_TEAM_ID"
      xcode: latest
      cocoapods: default
      groups:
        - app_store_credentials
        - code_signing
    scripts:
      - name: Set up environment
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Setting up iOS environment..."
          echo "Xcode version: $(xcodebuild -version)"
          echo "Current directory: $(pwd)"
          
      - name: Install dependencies
        script: |
          #!/usr/bin/env sh
          set -e
          npm ci
          
      - name: Add iOS platform
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap add ios
          
      - name: Sync project
        script: |
          #!/usr/bin/env sh
          set -e
          npx cap sync ios
          
      - name: Install CocoaPods
        script: |
          #!/usr/bin/env sh
          set -e
          cd ios/App
          pod install --repo-update
          
      - name: Configure iOS signing
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Configuring iOS signing..."
          
          # Créer le fichier exportOptions.plist dans le répertoire de travail
          cat > exportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>teamID</key>
              <string>YOUR_TEAM_ID</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          echo "exportOptions.plist created successfully"
          cat exportOptions.plist
          
      - name: List iOS project structure
        script: |
          #!/usr/bin/env sh
          set -e
          echo "iOS project structure:"
          ls -la ios/App/
          echo "Xcode project files:"
          ls -la ios/App/*.xcodeproj/
          
      - name: Build iOS IPA
        script: |
          #!/usr/bin/env sh
          set -e
          echo "Starting iOS build..."
          
          # Vérifier que le projet existe
          if [ ! -d "ios/App/App.xcworkspace" ]; then
            echo "Error: App.xcworkspace not found!"
            ls -la ios/App/
            exit 1
          fi
          
          # Build avec équipe de développement
          xcodebuild -workspace ios/App/App.xcworkspace \
                     -scheme App \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath /tmp/App.xcarchive \
                     archive \
                     -verbose \
                     CODE_SIGN_STYLE=Automatic \
                     DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
                     CODE_SIGN_IDENTITY=""
          
          echo "Archive created successfully"
          
          # Export IPA avec équipe configurée
          xcodebuild -exportArchive \
                     -archivePath /tmp/App.xcarchive \
                     -exportPath /tmp/App \
                     -exportOptionsPlist exportOptions.plist \
                     -verbose
          
          echo "IPA exported successfully"
          
    artifacts:
      - /tmp/App/App.ipa
      - /tmp/xcodebuild_logs/*.log
      - /tmp/App.xcarchive
    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_API_KEY
        key_id: $APP_STORE_CONNECT_KEY_ID
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true 